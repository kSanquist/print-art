'''
This program takes in a png pixel-art made using the accompanying template-generator
and prints the pixel art to the screen!
 Author : Kyle Sanquist
Version : 1.0
'''

from gen_image import print_img_str, print_all_imgs, generate_img_str
from grid_gen import get_user_grid_params, clear
import tkinter as tk
from tkinter import filedialog
import os, sys

parent_dir = os.path.dirname('./dist')
templates_dir = f'{parent_dir}/templates/'

# Uses Tkinter to allow user to select image or directory path
def get_path(f_type_: str):
    root = tk.Tk()
    root.withdraw()
    root.call("wm", "attributes", ".", "-topmost", True)
    if f_type_ == "d":
        print("\nPlease select the directory containing the PNG's you want to print")
        print("Note, any NON-PNG files will be SKIPPED during the printing process!")
        dir_path = filedialog.askdirectory(title="Directory of PNG's", initialdir="./images/")
        return dir_path
    else:
        print("\nPlease select the PNG you want to print")
        f_path = filedialog.askopenfilename(title="PNG Directory", filetypes=[("PNG Files", ".png")], initialdir="./images/")
        return f_path

def main():
    if len(os.listdir(templates_dir)) == 0:  # Handles if user doesn't have any templates saved
        clear()
        print('\nYou seem to not have any grid templates created!')
        print('For adequate results, it is recommended you use a grid generated by the provided grid generator')
        print('the create your masterpiece.')
        print('\nWould you like to generate a new grid?')
        gen_grid_conf = input("[Y/N] : ").upper()[0]
        if gen_grid_conf == 'Y':
            print("\nTaking you to grid generation...")
            clear(1)
            get_user_grid_params()
            clear()
        else:
            print("\nVery well, if you are not using a template generated by the grid generator,")
            print("we cannot guarantee adequate results. We hope you know what you're doing.")
            input("\nPress ENTER to continue...")
            clear()
    
    clear()
    f_type = ''
    while True:  # Handles the option selection screen
        print("\nWhat would you like to do?")
        print("( 0 )  Exit program")
        print("( 1 )  Create a new template")
        print("( 2 )  Print a single image of your choice")
        print("( 3 )  Print all images in a given directory")
        choice = input("\n[Enter Number] : ")
        if choice == "0":
            print("\nSounds good, exiting program...")
            sys.exit(0)
        elif choice == "1":
            print("\nTaking you to grid generation...")
            clear(1)
            get_user_grid_params()
            clear()
        elif choice == "2":
            f_type = 'f'
            break
        elif choice == "3":
            f_type = 'd'
            break
        else:
            print("\nYour input was invalid, pleases provide a number corresponding to the")
            print("option you prefer!")
            clear(2)

    # calls print_img_str(get_filepath) if path leads to file
    # calls print_all_imgs(get_filepath) if path leads to directory
    while (True):
        filepath = get_path(f_type_=f_type)
        if (filepath == ''):
            print("\nIt seems you closed the file picker prematurely, would you like to try again?")
            try_again = input("[Y/N] : ")
            if (try_again[0].upper() == "N"):
                print("\nVery well, taking you back to the main menu...")
                clear(2)
                main()
                break
        else:
            break

    file_name = filepath.split('/')[-1]
    if os.path.isfile(filepath):
        print(f"\nGenerating '{file_name}' ...\n")
        img_string = generate_img_str(filepath)
        clear()
        print_img_str(img_string)
    else:
        print(f"\nGenerating all PNG's from '{file_name}' ...\n")
        print_all_imgs(filepath)

    input("Press ENTER to return to the main menu...")
    main()
    

if __name__ == '__main__':
    main()